name: Deploy to Amazon Ecs by Clouddley
"on":
    push:
        branches:
            - master
    workflow_dispatch:
        branches:
            - master
env:
    AWS_REGION: eu-west-1
    ECR_REPOSITORY: clouddley-happinessproject
jobs:
    deploy:
        name: Deploy
        runs-on: ubuntu-latest
        outputs:
            image_uri: ${{ steps.build_image.outputs.image }}
        environment: dev
        steps:
            - name: checkout
              uses: actions/checkout@v3
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-region: ${{ env.AWS_REGION }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            - name: Login to Amazon ECR
              uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2
              id: login-ecr
            - name: Build, tag, and push image to Amazon ECR
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                IMAGE_TAG: latest
                SECRET: ${{ secrets.PGP_PASSPHRASE }}
              id: build_image
              run: |-
                docker build -f dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                BUILD_IMAGE=$( echo "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" | base64 -w0 )
                echo "::add-mask::$BUILD_IMAGE"
                image_encrypted=$(gpg --symmetric --batch --passphrase "$SECRET" --output - <(echo "$BUILD_IMAGE") | base64 -w0)
                echo "::set-output name=image::$image_encrypted"
    ping:
        name: Set Marker
        runs-on: ubuntu-latest
        needs: deploy
        steps:
            - name: Set Header Value
              env:
                SECRET: ${{ secrets.PGP_PASSPHRASE }}
              id: set-header-env
              run: |-
                echo "${{ needs.deploy.outputs.image_uri }}" | base64 --decode
                decrypted_image=$(gpg --decrypt --quiet --batch --passphrase "$SECRET" --output - <(echo "${{ needs.deploy.outputs.image_uri }}" | base64 --decode))
                echo "image_uri=$decrypted_image" >> $GITHUB_ENV
            - name: Notification stage
              uses: fjogeleit/http-request-action@v1
              with:
                bearerToken: ${{ secrets.CLOUDDLEY_TOKEN }}
                customHeaders: '{"X-Image-URI":"${{ env.image_uri }}"}'
                method: POST
                timeout: "18000"
                url: ${{ secrets.CLOUDDLEY_URL }}
